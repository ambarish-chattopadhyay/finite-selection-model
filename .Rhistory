d.robust.hajek.att.estimates.sbw_q_max.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.linear.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_max.bart.obs,
d.robust.hajek.att.estimates.sbw_q_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_q_max.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_mean_max.rf.obs,
d.robust.hajek.att.estimates.sbw_q_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_q_max.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.rf.obs,
linear_reg.att.estimates.obs,
bart.att.estimates.obs,
rf.att.estimates.obs)
#write.csv(summary_outcome, "Lalonde estimates FINAL.csv")
summary_outcome
num.datasets = 1000
set.seed(1)
## linear hajek estimators
hajek.att.estimates.simple_logit = rep(0, num.datasets)
hajek.att.estimates.complex_logit = rep(0, num.datasets)
## doubly robust 'model based' estimators - hajek
d.robust.hajek.att.estimates.simple_logit.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.complex_logit.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.simple_logit.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.complex_logit.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.simple_logit.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.complex_logit.rf =  rep(0, num.datasets)
## linear sbw estimators
hajek.att.estimates.sbw_mean_mean = rep(0, num.datasets)
hajek.att.estimates.sbw_mean_max = rep(0, num.datasets)
hajek.att.estimates.sbw_q_mean = rep(0, num.datasets)
hajek.att.estimates.sbw_q_max = rep(0, num.datasets)
hajek.att.estimates.sbw_moments_inter_mean = rep(0, num.datasets)
hajek.att.estimates.sbw_moments_inter_max = rep(0, num.datasets)
## doubly robust sbw estimators
d.robust.hajek.att.estimates.sbw_mean_mean.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_mean_max.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_mean.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_max.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_max.linear =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_mean_mean.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_mean_max.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_mean.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_max.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_max.bart =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_mean_mean.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_mean_max.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_mean.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_q_max.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf =  rep(0, num.datasets)
d.robust.hajek.att.estimates.sbw_moments_inter_max.rf =  rep(0, num.datasets)
## simple outcome regression using different model specifications
linear_reg.att.estimates = rep(0,num.datasets)
bart.att.estimates = rep(0,num.datasets)
rf.att.estimates = rep(0,num.datasets)
## run bootstrap
boot = 0
while(boot != num.datasets)
{
boot_index = sample(1:nrow(X.obs), nrow(X.obs), replace = TRUE)
X_boot = as.matrix(X.obs[boot_index,])
Z_boot = as.vector(Z.obs[boot_index])
outcomes_boot = as.vector(outcomes.obs[boot_index])
lal.boot = tryCatch({lalonde.att(X = X_boot, Z = Z_boot, outcomes = outcomes_boot)},
error = function(e) {
print('No solution')
return('error')})
#if (lal.boot == 'error') {next}
if(typeof(lal.boot) == "character"){next}
boot = boot + 1
print(boot)
## linear hajek estimators
hajek.att.estimates.simple_logit[boot] = lal.boot$hajek.att.estimate.simple_logit
hajek.att.estimates.complex_logit[boot] = lal.boot$hajek.att.estimate.complex_logit
## doubly robust 'model based' estimators - hajek
d.robust.hajek.att.estimates.simple_logit.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.simple_logit.linear
d.robust.hajek.att.estimates.complex_logit.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.complex_logit.linear
d.robust.hajek.att.estimates.simple_logit.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.simple_logit.bart
d.robust.hajek.att.estimates.complex_logit.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.complex_logit.bart
d.robust.hajek.att.estimates.simple_logit.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.simple_logit.rf
d.robust.hajek.att.estimates.complex_logit.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.complex_logit.rf
## linear sbw estimators
hajek.att.estimates.sbw_mean_mean[boot] = lal.boot$hajek.att.estimate.sbw_mean_mean
hajek.att.estimates.sbw_mean_max[boot] = lal.boot$hajek.att.estimate.sbw_mean_max
hajek.att.estimates.sbw_q_mean[boot] = lal.boot$hajek.att.estimate.sbw_q_mean
hajek.att.estimates.sbw_q_max[boot] = lal.boot$hajek.att.estimate.sbw_q_max
hajek.att.estimates.sbw_moments_inter_mean[boot] = lal.boot$hajek.att.estimate.sbw_moments_inter_mean
hajek.att.estimates.sbw_moments_inter_max[boot] = lal.boot$hajek.att.estimate.sbw_moments_inter_max
## doubly robust sbw estimators
d.robust.hajek.att.estimates.sbw_mean_mean.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_mean.linear
d.robust.hajek.att.estimates.sbw_mean_max.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_max.linear
d.robust.hajek.att.estimates.sbw_q_mean.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_mean.linear
d.robust.hajek.att.estimates.sbw_q_max.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_max.linear
d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_mean.linear
d.robust.hajek.att.estimates.sbw_moments_inter_max.linear[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_max.linear
d.robust.hajek.att.estimates.sbw_mean_mean.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_mean.bart
d.robust.hajek.att.estimates.sbw_mean_max.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_max.bart
d.robust.hajek.att.estimates.sbw_q_mean.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_mean.bart
d.robust.hajek.att.estimates.sbw_q_max.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_max.bart
d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_mean.bart
d.robust.hajek.att.estimates.sbw_moments_inter_max.bart[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_max.bart
d.robust.hajek.att.estimates.sbw_mean_mean.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_mean.rf
d.robust.hajek.att.estimates.sbw_mean_max.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_mean_max.rf
d.robust.hajek.att.estimates.sbw_q_mean.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_mean.rf
d.robust.hajek.att.estimates.sbw_q_max.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_q_max.rf
d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_mean.rf
d.robust.hajek.att.estimates.sbw_moments_inter_max.rf[boot] =  lal.boot$d.robust.hajek.att.estimate.sbw_moments_inter_max.rf
## regression based estimators
linear_reg.att.estimates[boot] = lal.boot$linear_reg.att.estimate
bart.att.estimates[boot] = lal.boot$bart.att.estimate
rf.att.estimates[boot] = lal.boot$rf.att.estimate
}
###########################################################################################################
######################### FINAL ESTIMATOR & BOOTSTRAP SE #########################################################
##############################################################################################################
num_estimates = 35
num_cols = 2
summary_outcome = matrix(rep(0, num_estimates*num_cols), nrow = num_estimates, ncol = num_cols)
colnames(summary_outcome) = c('Estimate', 'Standard Error')
rownames(summary_outcome) = c('Hajek (Simple Logistic)', 'Hajek (Complex Logistic)',
'DR Linear Hajek (Simple Logistic)', 'DR Linear Hajek (Complex Logistic)',
'DR BART Hajek (Simple Logistic)', 'DR BART Hajek (Complex Logistic)',
'DR RF Hajek (Simple Logistic)', 'DR RF Hajek (Complex Logistic)',
'Hajek (SBW (Tolerance: Mean))', 'Hajek (SBW (Tolerance: Max))',
'Hajek (SBW, Deciles (Tolerance: Mean))', 'Hajek (SBW, Deciles (Tolerance: Max))',
'Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR Linear Hajek (SBW (Tolerance: Mean))', 'DR Linear Hajek (SBW (Tolerance: Max))',
'DR Linear Hajek (SBW, Deciles (Tolerance: Mean))', 'DR Linear Hajek (SBW, Deciles (Tolerance: Max))',
'DR Linear Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR Linear Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR BART Hajek (SBW (Tolerance: Mean))', 'DR BART Hajek (SBW (Tolerance: Max))',
'DR BART Hajek (SBW, Deciles (Tolerance: Mean))', 'DR BART Hajek (SBW, Deciles (Tolerance: Max))',
'DR BART Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR BART Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR RF Hajek (SBW (Tolerance: Mean))', 'DR RF Hajek (SBW (Tolerance: Max))',
'DR RF Hajek (SBW, Deciles (Tolerance: Mean))', 'DR RF Hajek (SBW, Deciles (Tolerance: Max))',
'DR RF Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR RF Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'Linear Regression','BART Regression','RF Regression')
summary_outcome[,1]=c(hajek.att.estimates.simple_logit.obs,
hajek.att.estimates.complex_logit.obs,
d.robust.hajek.att.estimates.simple_logit.linear.obs,
d.robust.hajek.att.estimates.complex_logit.linear.obs,
d.robust.hajek.att.estimates.simple_logit.bart.obs,
d.robust.hajek.att.estimates.complex_logit.bart.obs,
d.robust.hajek.att.estimates.simple_logit.rf.obs,
d.robust.hajek.att.estimates.complex_logit.rf.obs,
hajek.att.estimates.sbw_mean_mean.obs,
hajek.att.estimates.sbw_mean_max.obs,
hajek.att.estimates.sbw_q_mean.obs,
hajek.att.estimates.sbw_q_max.obs,
hajek.att.estimates.sbw_moments_inter_mean.obs,
hajek.att.estimates.sbw_moments_inter_max.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_mean_max.linear.obs,
d.robust.hajek.att.estimates.sbw_q_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_q_max.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.linear.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_max.bart.obs,
d.robust.hajek.att.estimates.sbw_q_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_q_max.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_mean_max.rf.obs,
d.robust.hajek.att.estimates.sbw_q_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_q_max.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.rf.obs,
linear_reg.att.estimates.obs,
bart.att.estimates.obs,
rf.att.estimates.obs)
summary_outcome[,2]=c(sd(hajek.att.estimates.simple_logit),
sd(hajek.att.estimates.complex_logit),
sd(d.robust.hajek.att.estimates.simple_logit.linear),
sd(d.robust.hajek.att.estimates.complex_logit.linear),
sd(d.robust.hajek.att.estimates.simple_logit.bart),
sd(d.robust.hajek.att.estimates.complex_logit.bart),
sd(d.robust.hajek.att.estimates.simple_logit.rf),
sd(d.robust.hajek.att.estimates.complex_logit.rf),
sd(hajek.att.estimates.sbw_mean_mean),
sd(hajek.att.estimates.sbw_mean_max),
sd(hajek.att.estimates.sbw_q_mean),
sd(hajek.att.estimates.sbw_q_max),
sd(hajek.att.estimates.sbw_moments_inter_mean),
sd(hajek.att.estimates.sbw_moments_inter_max),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_mean_max.linear),
sd(d.robust.hajek.att.estimates.sbw_q_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_q_max.linear),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.linear),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_mean_max.bart),
sd(d.robust.hajek.att.estimates.sbw_q_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_q_max.bart),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.bart),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_mean_max.rf),
sd(d.robust.hajek.att.estimates.sbw_q_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_q_max.rf),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.rf),
sd(linear_reg.att.estimates),
sd(bart.att.estimates),
sd(rf.att.estimates))
#write.csv(summary_outcome, 'Lalonde bootstrap se Jan 6.csv')
#############################################################################################################################
#############################################################################################################################
######################################## WEIGHT DIAGNOSTICS - BALANCE & STABILITY ###########################################
############################################################################################################################
#### 1. Balance Diagnostics
# Weight matrix
W.mat = cbind(rep(1, nrow(observed.dataset)), iptw.simple_logit.weights, iptw.complex_logit.weights,
sbw.att.weights_mean, sbw_q.att.weights_mean, sbw_moments_inter.att.weights_mean)
colnames(W.mat) = c('Unweighted', 'Simple Logistic', 'Complex Logistic', 'SBW 1', 'SBW 2', 'SBW 3')
## 1.1. Plot showing standardized difference in means for original covariates
observed.dataset_with.weights = cbind(observed.dataset.obs,W.mat)
covs.to.check.1 = c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8')
SMD.matrix = matrix(rep(0, length(covs.to.check.1)*ncol(W.mat)),nrow=length(covs.to.check.1), ncol=ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.1
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.1)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset_with.weights, cov=covs.to.check.1[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1.0, v_line=0.1, name = covs.to.check.1)
## 1.2. Plot showing standardized difference in means for all squares and two way interactions for continuous covs
observed.dataset.moments_inter_with.weights = cbind(observed.dataset.moments_inter.obs ,W.mat)
covs.to.check.2 = c(covs.to.check.1, 'V12', 'V22', 'V72', 'V82', 'V1:V2', 'V1:V7', 'V1:V8', 'V2:V7', 'V2:V8', 'V7:V8')
SMD.matrix = matrix(rep(0, length(covs.to.check.2)*ncol(W.mat)), nrow=length(covs.to.check.2),
ncol = ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.2
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.2)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset.moments_inter_with.weights,
cov=covs.to.check.2[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1, v_line=0.1, legend.inset=c(0,0), name = covs.to.check.2)
## 1.3. Plot showing standardized difference in means for all deciles of continuous covariates
observed.dataset.moments_inter_q_with.weights = cbind(observed.dataset.moments_inter_with.weights,
observed.dataset.q.obs[,11:ncol(observed.dataset.q.obs)])
covs.to.check.3 = colnames(observed.dataset.q.obs)[11:ncol(observed.dataset.q.obs)]
SMD.matrix = matrix(rep(0, length(covs.to.check.3)*ncol(W.mat)), nrow=length(covs.to.check.3),
ncol=ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.3
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.3)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset.moments_inter_q_with.weights,
cov=covs.to.check.3[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1, v_line=0.1, name = covs.to.check.3)
# 1.4 Comparing KS statistics
# Function to compute KS Statistic
ksDist=function(df, cov, t.ind, weight.ind)
{
tx.df = df[df[[t.ind]] == 1, ]
control.df = df[df[[t.ind]] == 0, ]
ewcdf.control <- ewcdf(control.df[[cov]], weights= control.df[[weight.ind]]/sum(control.df[[weight.ind]]))
ewcdf.treated <- ewcdf(tx.df[[cov]], weights= tx.df[[weight.ind]]/sum(tx.df[[weight.ind]]))
ks.weighted <-max(abs(ewcdf.treated(df[[cov]])-ewcdf.control(df[[cov]])))
return(ks.weighted)
}
# Weight matrix
W.mat = cbind(rep(1,nrow(observed.dataset.obs)), iptw.simple_logit.weights, iptw.complex_logit.weights,
sbw.att.weights_mean, sbw_q.att.weights_mean, sbw_moments_inter.att.weights_mean)
colnames(W.mat) = c('Unweighted', 'Simple Logistic', 'Complex Logistic', 'SBW 1', 'SBW 2', 'SBW 3')
observed.dataset_with.weights = cbind(observed.dataset.obs,W.mat)
covs.to.check = c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8')
KS.matrix = matrix(rep(0, length(covs.to.check)*ncol(W.mat)), nrow=length(covs.to.check), ncol=ncol(W.mat))
rownames(KS.matrix) = covs.to.check
colnames(KS.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.bal)) {
for(j in 1:ncol(W.mat)) {
KS.matrix[i,j] = ksDist(df=observed.dataset_with.weights, cov=covs.to.check[i], t.ind='Z',
weight.ind=colnames(W.mat)[j])
}
}
#write.csv(KS.matrix, "Lalonde KS.csv")
################################################################################################
###############################################################################################
## Diagnostics for stability, coefficient of variation and measure of extremeties
Cvar = data.frame(Weight=colnames(W.mat), CV=rep(0, ncol(W.mat)), SD = rep(0, ncol(W.mat)), IQR=rep(0, ncol(W.mat)),
p_95=rep(0, ncol(W.mat)), p_99=rep(0, ncol(W.mat)), max = rep(0, ncol(W.mat)))
for(i in 1:ncol(W.mat)) {
w.normalized = W.mat[Z.obs==0,i]/sum(W.mat[Z.obs==0,i])
Cvar[i,2] = sd(W.mat[Z.obs==0,i])/mean(W.mat[Z.obs==0,i])
Cvar[i,3] = sd(w.normalized)
med = quantile(w.normalized, probs=0.5)
iqr = quantile(w.normalized, probs=0.75)-quantile(w.normalized, probs=0.25)
Cvar[i,4] = iqr
Cvar[i,5] = quantile(w.normalized, probs=0.95)
Cvar[i,6] = quantile(w.normalized, probs=0.99)
Cvar[i,7] = max(w.normalized)
Cvar[,-1] = round(Cvar[,-1], 4)
}
#write.csv(Cvar, "Lalonde Stability Normalized.csv")
# Weight matrix
W.mat = cbind(rep(1, nrow(observed.dataset.obs)), iptw.simple_logit.weights, iptw.complex_logit.weights,
sbw.att.weights_mean, sbw_q.att.weights_mean, sbw_moments_inter.att.weights_mean)
colnames(W.mat) = c('Unweighted', 'Simple Logistic', 'Complex Logistic', 'SBW 1', 'SBW 2', 'SBW 3')
## 1.1. Plot showing standardized difference in means for original covariates
observed.dataset_with.weights = cbind(observed.dataset.obs,W.mat)
covs.to.check.1 = c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8')
SMD.matrix = matrix(rep(0, length(covs.to.check.1)*ncol(W.mat)),nrow=length(covs.to.check.1), ncol=ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.1
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.1)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset_with.weights, cov=covs.to.check.1[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1.0, v_line=0.1, name = covs.to.check.1)
## 1.2. Plot showing standardized difference in means for all squares and two way interactions for continuous covs
observed.dataset.moments_inter_with.weights = cbind(observed.dataset.moments_inter.obs ,W.mat)
covs.to.check.2 = c(covs.to.check.1, 'V12', 'V22', 'V72', 'V82', 'V1:V2', 'V1:V7', 'V1:V8', 'V2:V7', 'V2:V8', 'V7:V8')
SMD.matrix = matrix(rep(0, length(covs.to.check.2)*ncol(W.mat)), nrow=length(covs.to.check.2),
ncol = ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.2
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.2)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset.moments_inter_with.weights,
cov=covs.to.check.2[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1, v_line=0.1, legend.inset=c(0,0), name = covs.to.check.2)
## 1.3. Plot showing standardized difference in means for all deciles of continuous covariates
observed.dataset.moments_inter_q_with.weights = cbind(observed.dataset.moments_inter_with.weights,
observed.dataset.q.obs[,11:ncol(observed.dataset.q.obs)])
covs.to.check.3 = colnames(observed.dataset.q.obs)[11:ncol(observed.dataset.q.obs)]
SMD.matrix = matrix(rep(0, length(covs.to.check.3)*ncol(W.mat)), nrow=length(covs.to.check.3),
ncol=ncol(W.mat))
rownames(SMD.matrix) = covs.to.check.3
colnames(SMD.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.check.3)) {
for(j in 1:ncol(W.mat)) {
SMD.matrix[i,j] = compute.std.diffs.ovars(df=observed.dataset.moments_inter_q_with.weights,
cov=covs.to.check.3[i],
t.ind='Z', weight.ind=colnames(W.mat)[j])
}
}
love.plot(SMD=SMD.matrix, x_up=1, v_line=0.1, name = covs.to.check.3)
# Function to compute KS Statistic
ksDist=function(df, cov, t.ind, weight.ind)
{
tx.df = df[df[[t.ind]] == 1, ]
control.df = df[df[[t.ind]] == 0, ]
ewcdf.control <- ewcdf(control.df[[cov]], weights= control.df[[weight.ind]]/sum(control.df[[weight.ind]]))
ewcdf.treated <- ewcdf(tx.df[[cov]], weights= tx.df[[weight.ind]]/sum(tx.df[[weight.ind]]))
ks.weighted <-max(abs(ewcdf.treated(df[[cov]])-ewcdf.control(df[[cov]])))
return(ks.weighted)
}
KS.weights
# Weight matrix
W.mat = cbind(rep(1,nrow(observed.dataset.obs)), iptw.simple_logit.weights, iptw.complex_logit.weights,
sbw.att.weights_mean, sbw_q.att.weights_mean, sbw_moments_inter.att.weights_mean)
colnames(W.mat) = c('Unweighted', 'Simple Logistic', 'Complex Logistic', 'SBW 1', 'SBW 2', 'SBW 3')
observed.dataset_with.weights = cbind(observed.dataset.obs,W.mat)
covs.to.check = c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8')
KS.matrix = matrix(rep(0, length(covs.to.check)*ncol(W.mat)), nrow=length(covs.to.check), ncol=ncol(W.mat))
rownames(KS.matrix) = covs.to.check
colnames(KS.matrix) = colnames(W.mat)
for(i in 1:length(covs.to.bal)) {
for(j in 1:ncol(W.mat)) {
KS.matrix[i,j] = ksDist(df=observed.dataset_with.weights, cov=covs.to.check[i], t.ind='Z',
weight.ind=colnames(W.mat)[j])
}
}
KS.matrix
Cvar = data.frame(Weight=colnames(W.mat), CV=rep(0, ncol(W.mat)), SD = rep(0, ncol(W.mat)), IQR=rep(0, ncol(W.mat)),
p_95=rep(0, ncol(W.mat)), p_99=rep(0, ncol(W.mat)), max = rep(0, ncol(W.mat)))
for(i in 1:ncol(W.mat)) {
w.normalized = W.mat[Z.obs==0,i]/sum(W.mat[Z.obs==0,i])
Cvar[i,2] = sd(W.mat[Z.obs==0,i])/mean(W.mat[Z.obs==0,i])
Cvar[i,3] = sd(w.normalized)
med = quantile(w.normalized, probs=0.5)
iqr = quantile(w.normalized, probs=0.75)-quantile(w.normalized, probs=0.25)
Cvar[i,4] = iqr
Cvar[i,5] = quantile(w.normalized, probs=0.95)
Cvar[i,6] = quantile(w.normalized, probs=0.99)
Cvar[i,7] = max(w.normalized)
Cvar[,-1] = round(Cvar[,-1], 4)
}
Cvar[-1,]
num_estimates = 35
num_cols = 2
summary_outcome = matrix(rep(0, num_estimates*num_cols), nrow = num_estimates, ncol = num_cols)
colnames(summary_outcome) = c('Estimate', 'Standard Error')
rownames(summary_outcome) = c('Hajek (Simple Logistic)', 'Hajek (Complex Logistic)',
'DR Linear Hajek (Simple Logistic)', 'DR Linear Hajek (Complex Logistic)',
'DR BART Hajek (Simple Logistic)', 'DR BART Hajek (Complex Logistic)',
'DR RF Hajek (Simple Logistic)', 'DR RF Hajek (Complex Logistic)',
'Hajek (SBW (Tolerance: Mean))', 'Hajek (SBW (Tolerance: Max))',
'Hajek (SBW, Deciles (Tolerance: Mean))', 'Hajek (SBW, Deciles (Tolerance: Max))',
'Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR Linear Hajek (SBW (Tolerance: Mean))', 'DR Linear Hajek (SBW (Tolerance: Max))',
'DR Linear Hajek (SBW, Deciles (Tolerance: Mean))', 'DR Linear Hajek (SBW, Deciles (Tolerance: Max))',
'DR Linear Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR Linear Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR BART Hajek (SBW (Tolerance: Mean))', 'DR BART Hajek (SBW (Tolerance: Max))',
'DR BART Hajek (SBW, Deciles (Tolerance: Mean))', 'DR BART Hajek (SBW, Deciles (Tolerance: Max))',
'DR BART Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR BART Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'DR RF Hajek (SBW (Tolerance: Mean))', 'DR RF Hajek (SBW (Tolerance: Max))',
'DR RF Hajek (SBW, Deciles (Tolerance: Mean))', 'DR RF Hajek (SBW, Deciles (Tolerance: Max))',
'DR RF Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Mean))', 'DR RF Hajek (SBW 2nd Order Moments & 2-way Interactions (Tolerance: Max))',
'Linear Regression','BART Regression','RF Regression')
summary_outcome[,1]=c(hajek.att.estimates.simple_logit.obs,
hajek.att.estimates.complex_logit.obs,
d.robust.hajek.att.estimates.simple_logit.linear.obs,
d.robust.hajek.att.estimates.complex_logit.linear.obs,
d.robust.hajek.att.estimates.simple_logit.bart.obs,
d.robust.hajek.att.estimates.complex_logit.bart.obs,
d.robust.hajek.att.estimates.simple_logit.rf.obs,
d.robust.hajek.att.estimates.complex_logit.rf.obs,
hajek.att.estimates.sbw_mean_mean.obs,
hajek.att.estimates.sbw_mean_max.obs,
hajek.att.estimates.sbw_q_mean.obs,
hajek.att.estimates.sbw_q_max.obs,
hajek.att.estimates.sbw_moments_inter_mean.obs,
hajek.att.estimates.sbw_moments_inter_max.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_mean_max.linear.obs,
d.robust.hajek.att.estimates.sbw_q_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_q_max.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.linear.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_max.bart.obs,
d.robust.hajek.att.estimates.sbw_q_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_q_max.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.bart.obs,
d.robust.hajek.att.estimates.sbw_mean_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_mean_max.rf.obs,
d.robust.hajek.att.estimates.sbw_q_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_q_max.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf.obs,
d.robust.hajek.att.estimates.sbw_moments_inter_max.rf.obs,
linear_reg.att.estimates.obs,
bart.att.estimates.obs,
rf.att.estimates.obs)
summary_outcome[,2]=c(sd(hajek.att.estimates.simple_logit),
sd(hajek.att.estimates.complex_logit),
sd(d.robust.hajek.att.estimates.simple_logit.linear),
sd(d.robust.hajek.att.estimates.complex_logit.linear),
sd(d.robust.hajek.att.estimates.simple_logit.bart),
sd(d.robust.hajek.att.estimates.complex_logit.bart),
sd(d.robust.hajek.att.estimates.simple_logit.rf),
sd(d.robust.hajek.att.estimates.complex_logit.rf),
sd(hajek.att.estimates.sbw_mean_mean),
sd(hajek.att.estimates.sbw_mean_max),
sd(hajek.att.estimates.sbw_q_mean),
sd(hajek.att.estimates.sbw_q_max),
sd(hajek.att.estimates.sbw_moments_inter_mean),
sd(hajek.att.estimates.sbw_moments_inter_max),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_mean_max.linear),
sd(d.robust.hajek.att.estimates.sbw_q_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_q_max.linear),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.linear),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.linear),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_mean_max.bart),
sd(d.robust.hajek.att.estimates.sbw_q_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_q_max.bart),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.bart),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.bart),
sd(d.robust.hajek.att.estimates.sbw_mean_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_mean_max.rf),
sd(d.robust.hajek.att.estimates.sbw_q_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_q_max.rf),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_mean.rf),
sd(d.robust.hajek.att.estimates.sbw_moments_inter_max.rf),
sd(linear_reg.att.estimates),
sd(bart.att.estimates),
sd(rf.att.estimates))
#write.csv(summary_outcome, 'Lalonde bootstrap se Jan 6.csv')
summary_outcome
write.csv(summary_outcome, 'Lalonde bootstrap se FINAL Jan 9.csv')
library(devtools)
library(roxygen2)
?sbw
setwd("~/R packages/FSM")
setwd("./FSM")
document()
setwd("..")
install("FSM")
remove.packages("FSM", lib="~/R/win-library/3.6")
install.packages("rtools")
install.packages("Rtools")
setwd("./FSM")
document()
setwd("~/R packages")
setwd("./FSM")
document()
